#!/usr/bin/php
<?php
/**
 * moOde audio player (C) 2014 Tim Curtis
 * http://moodeaudio.org
 *
 * This Program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This Program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * 2019-11-24 TC moOde 6.4.0
 *
 */

define('VERSION', '1.3.1');

$option = isset($argv[1]) ? $argv[1] : '';

switch ($option) {
	case '-f':
	case '-F':
		audio_formats($option);
		break;
	case '-i':
		system_info();
		break;
	case '-l':
		moode_log();
		break;
	case '-m':
		system_monitor();
		break;
	case '-r':
		restart_servers();
		break;
	case '-t':
		tail_log();
		break;
	case '--version':
		echo VERSION . "\n";
		break;
	case '--help':
	default:
		echo
"Usage: moodeutl [OPTION]
Moode utility programs

With no OPTION print the help text and exit.

 -f\t\tprint supported audio formats
 -F\t\tprint supported audio formats and sample rates
 -i\t\tprint system info
 -l\t\tprint moode log
 -m\t\trun system monitor
 -r\t\trestart servers
 -t\t\tprint last 10 lines of moode log and wait
 --version\tprint the program version
 --help\t\tprint this help text\n";
		break;
}

function audio_formats($option) {
	$card_num = trim(shell_exec("sqlite3 /var/local/www/db/moode-sqlite3.db \"SELECT value FROM cfg_mpd WHERE param='device'\""));
	$audio_output = trim(shell_exec('cat /proc/asound/card0/pcm0p/sub0/hw_params | grep closed'));

	if ($audio_output == 'closed') {
		$rate_option = $option == '-F' ? '-s' : '';

	 	$result = json_decode(shell_exec('alsa-capabilities -n ' . $rate_option .' -j 2>&1'), true);
		//echo print_r($result, true);

		// Without sample rates
		if ($option == '-f') {
			foreach ($result['cards'] as $card) {
				foreach ($card['outputs'] as $output) {
					if ($output['hwaddress'] == 'hw:' . $card_num . ',0') {
						foreach ($output['encoding_formats'] as $format) {
							echo trim($format == '(n/a)' ? 'Unable to determine formats' : $format) . "\n";
				 		}
					}
				}
			}
		}
		// With sample rates
		else {
			if (is_array($result['cards'])) {
				foreach ($result['cards'] as $card) {
					foreach ($card['outputs'] as $output) {
						if ($output['hwaddress'] == 'hw:' . $card_num . ',0') {
							foreach ($output['encoding_formats'] as $format) {
								//echo trim($format) . "\n";
								foreach ($format as $fmt => $rates) {
									//echo trim($fmt) . "\n";
									$print_line = $fmt . ': ';
									foreach ($rates as $rate) {
										//echo trim($rate) . "\n";
										$print_line .= $rate / 1000 . 'K|';
									}

									$print_line = substr($print_line, 0, -2);
									echo $print_line . "\n";
								}
					 		}
						}
					}
				}
			}
			else {
				echo "Unable to determine formats\n";
			}
		}
	}
	else {
		echo "Can't detect formats or rates because audio device is in use\n";
	}
}

function system_info() {
	echo "Generating info...\n";
	echo shell_exec('sudo /var/www/command/sysinfo.sh');
}

function moode_log() {
	echo shell_exec('cat /var/log/moode.log');
}

function system_monitor() {
	echo "Gathering data...\r";
	while(true) {
		// Frequency
		$cpu_freq = file_get_contents('/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq');
		if ($cpu_freq < 1000000) {
	        $cpu_freq = number_format((int)$cpu_freq / 1000, 0, '.', '');
	        $cpu_freq .= ' MHz';
		}
		else {
	        $cpu_freq = number_format((int)$cpu_freq / 1000000, 1, '.', '');
	        $cpu_freq .= ' GHz';
		}

		// Temp
		$cpu_temp = substr(file_get_contents('/sys/class/thermal/thermal_zone0/temp'), 0, 2);

		// cpu utilization
		$cpu_load = exec("top -bn 2 -d 1.0 | grep 'Cpu(s)' | tail -n 1 | awk '{print 100 - $8}'");
		$cpu_load += exec("top -bn 2 -d 0.75 | grep 'Cpu(s)' | tail -n 1 | awk '{print 100 - $8}'");
		$cpu_load = $cpu_load / 2;
		$cpu_load = number_format($cpu_load,0,'.','');

		// Memory
		$mem_total = exec("grep MemTotal /proc/meminfo | awk '{print $2}'");
		$mem_avail = exec("grep MemAvailable /proc/meminfo | awk '{print $2}'");
		$mem_util = number_format(100 * (1 - ($mem_avail / $mem_total)), 0, '.', '');

		// disk utilization
		$disk_util = exec("df -h | awk 'FNR==2 {print $5}'");

		// php fpm pool count
		$fpm_pool = exec('pgrep -c -f "php-fpm: pool www"');

		echo 'CPU: ' . $cpu_freq . ' | LOAD: ' . $cpu_load . '%' . ' | TEMP: ' . $cpu_temp . "\xB0" . 'C | RAM_USED: ' . $mem_util . '% | DISK_USED: ' . $disk_util . ' | FPM_POOL: ' . $fpm_pool . ' workers ' . "\r";
	}
}

function restart_servers() {
	exec('sudo killall worker.php');
	exec('sudo killall watchdog.sh');
	exec('sudo rm /run/worker.pid');
	exec('sudo systemctl restart php7.3-fpm');
	exec('sudo systemctl restart nginx');
	exec('sudo systemctl stop mpd');
	exec('sudo /var/www/command/worker.php');
	echo "Servers restarted\n";
}

function tail_log() {
	$file = '/var/log/moode.log';
	$size = filesize($file) - 1024;
	while (true) {
		clearstatcache();
		$current_size = filesize($file);
		if ($size == $current_size) {
			sleep(1);
		    continue;
		}

		$fh = fopen($file, "r");
		fseek($fh, $size);

		while ($d = fgets($fh)) {
			echo $d;
		}
		fclose($fh);
		$size = $current_size;
	}
}
